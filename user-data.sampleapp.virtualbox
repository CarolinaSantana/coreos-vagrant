#cloud-config

---
write_files:
- path: "/etc/postgres-credentials.env"
  permissions: '0644'
  content: |
    POSTGRES_USER=postgres
    POSTGRES_PASSWORD=postgres
- path: "/etc/nginx.conf"
  permissions: '0644'
  content: |
    server {
      listen 80;
      root /usr/src/app/public;
      location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        try_files $uri /page_cache/$uri /page_cache/$uri.html @app;
      }
      location @app{
        proxy_pass http://app:9292;
        break;
      }
    }
- path: "/home/core/volume-public.service"
  permissions: '0644'
  content: "[Unit] \nDescription= volume-public share between some-postgres, app-job,
    app-task and some-nginx \nAfter=docker.service\nRequires=docker.service\n\n[Service]
    \nTimeoutStartSec=0 \nExecStart=/usr/bin/docker volume create --name volume-public\n\n[X-Fleet]\nGlobal=true\n"
- path: "/home/core/postgresql.service"
  permissions: '0644'
  content: "[Unit] \nDescription=PostgreSQL database \nAfter=docker.service volume-public.service\nRequires=docker.service
    volume-public.service\n\n[Service] \nTimeoutStartSec=0\nRestart=always\nEnvironmentFile=/etc/postgres-credentials.env\nExecStartPre=-/usr/bin/docker
    kill some-postgres \nExecStartPre=-/usr/bin/docker rm some-postgres \nExecStartPre=/usr/bin/docker
    pull postgres \nExecStart=/usr/bin/docker run --rm --name some-postgres \\\n-e
    \"POSTGRES_USER=${POSTGRES_USER}\" -e \"POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\"
    \\\n-v \"volume-public:/var/lib/posgresql\" -p \"5432:5432\" postgres \nExecStop=/usr/bin/docker
    stop some-postgres\n\n[X-Fleet]\nGlobal=true\n"
- path: "/home/core/app-job.service"
  permissions: '0644'
  content: "[Unit] \nDescription=executable app-job container that creates, migrates,
    seeds and populates the database\nAfter=docker.service volume-public.service postgresql.service\nRequires=docker.service
    volume-public.service postgresql.service\n\n[Service] \nTimeoutStartSec=0 \nEnvironmentFile=/etc/postgres-credentials.env\nExecStartPre=-/usr/bin/docker
    kill app-job \nExecStartPre=-/usr/bin/docker rm app-job \nExecStartPre=/usr/bin/docker
    pull carolina/sample_app_rails_4_image:latest \nExecStart=/usr/bin/docker run
    --rm --name app-job -v \"volume-public:/usr/src/app/public\" --entrypoint \"./setup.sh\"
    \\\n-e \"POSTGRES_USER=${POSTGRES_USER}\" -e \"POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\"
    \\\n-w \"/usr/src/app\" --link \"some-postgres:db\" \\\ncarolina/sample_app_rails_4_image:latest\n\n[X-Fleet]\nGlobal=true\n"
- path: "/home/core/app-task.service"
  permissions: '0644'
  content: "[Unit] \nDescription=app-task container that runs the server puma\nAfter=docker.service
    volume-public.service postgresql.service app-job.service\nRequires=docker.service
    volume-public.service postgresql.service app-job.service\n\n[Service] \nTimeoutStartSec=0\nRestart=always
    \nEnvironmentFile=/etc/postgres-credentials.env\nExecStartPre=-/usr/bin/docker
    kill app-task \nExecStartPre=-/usr/bin/docker rm app-task\nExecStartPre=/usr/bin/docker
    pull carolina/sample_app_rails_4_image:latest \nExecStart=/usr/bin/docker run
    --rm --name app-task \\\n-e \"POSTGRES_USER=${POSTGRES_USER}\" -e \"POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\"
    \\\n-w \"/usr/src/app\" -v \"volume-public:/usr/src/app/public\" --link \"some-postgres:db\"
    \\\ncarolina/sample_app_rails_4_image:latest \\\n/bin/bash -c \"cp config/database.yml.postgresql
    config/database.yml && \\\ncp ./.secret.example ./.secret && puma -p 9292\"\nExecStop=/usr/bin/docker
    stop app-task\n\n[X-Fleet]\nGlobal=true\n"
- path: "/home/core/nginx.service"
  permissions: '0644'
  content: "[Unit] \nDescription=some-nginx container that runs a reverse proxy server
    and a web server\nAfter=docker.service volume-public.service postgresql.service
    app-job.service app-task.service\nRequires=docker.service volume-public.service
    postgresql.service app-job.service app-task.service\n\n[Service] \nTimeoutStartSec=0\nRestart=always
    \nExecStartPre=-/usr/bin/docker kill some-nginx \nExecStartPre=-/usr/bin/docker
    rm some-nginx\nExecStartPre=/usr/bin/docker pull nginx \nExecStart=/usr/bin/docker
    run --rm --name some-nginx \\\n-v \"/etc/nginx.conf:/etc/nginx/conf.d/default.conf\"
    \\\n-p \"80:80\" --link \"app-task:app\" -v \"volume-public:/usr/src/app/public\"
    nginx \nExecStop=/usr/bin/docker stop some-nginx\n\n[X-Fleet]\nGlobal=true\n"
coreos:
  update:
    reboot-strategy: 'off'
  etcd2:
    advertise-client-urls: http://$public_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    discovery: https://discovery.etcd.io/cee814b2b6e3bf2c2fba34547ed32c7a
  fleet:
    public-ip: "$public_ipv4"
  flannel:
    interface: "$private_ipv4"
  units:
  - name: update-engine.service
    mask: true
  - name: locksmithd.service
    mask: true
  - name: etcd2.service
    command: start
  - name: fleet.service
    command: start
    enable: true
  - name: flanneld.service
    drop-ins:
    - name: 50-network-config.conf
      content: |
        [Service]
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "172.17.0.0/16", "Backend": { "Type": "udp" } }'
    command: start
    enable: true
  - name: docker-tcp.socket
    command: start
    enable: true
    content: |
      [Unit]
      Description=Docker Socket for the API

      [Socket]
      ListenStream=2375
      Service=docker.service
      BindIPv6Only=both

      [Install]
      WantedBy=multi-user.target
  - name: fleet-volume-public.service
    command: start
    content: |
      [Unit]
      Description=Start volume-public.service using fleet

      [Service]
      ExecStart=/usr/bin/fleetctl start /home/core/volume-public.service
  - name: fleet-postgresql.service
    command: start
    content: |
      [Unit]
      Description=Start postgresql.service using fleet

      [Service]
      ExecStart=/usr/bin/fleetctl start /home/core/postgresql.service
  - name: fleet-app-job.service
    command: start
    content: |
      [Unit]
      Description=Start app-job.service using fleet

      [Service]
      ExecStart=/usr/bin/fleetctl start /home/core/app-job.service
  - name: fleet-app-task.service
    command: start
    content: |
      [Unit]
      Description=Start app-task.service using fleet

      [Service]
      ExecStart=/usr/bin/fleetctl start /home/core/app-task.service
  - name: fleet-nginx.service
    command: start
    content: |
      [Unit]
      Description=Start nginx.service using fleet

      [Service]
      ExecStart=/usr/bin/fleetctl start /home/core/nginx.service
